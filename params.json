{"name":"Gooey","tagline":"GHCJS Examples","body":"# GHCJS Examples\r\n\r\n## hello\r\nHello World example, uses the bare minimum of functions from\r\n\r\n## `ghcjs-dom` to get text into the browser window.\r\n\r\n## embed\r\nOnly slightly more elaborate than =hello=, sets a large chunk of\r\nstatic HTML, and then selects several elements by id.\r\n\r\n## hamlet\r\nUse `hamlet` and `blaze-html` to create the inner HTML content.\r\n\r\n## echo\r\nUse `ghcjs-dom` to read from an input field and echo the value to a paragraph..\r\n\r\n## echo-button\r\nLike *echo*, but register a callback on a button, and only update the paragraph when the button is pressed.  This is the simplest example with a callback.\r\n\r\n## timer\r\nA countdown timer using an `MVar` event queue to tie the knot.  Callbacks on DOM elements add events to the queue.  A single Haskell thread pops events from the queue and updates the (global) state.  A `render` function is called in a loop by `requestAnimationFrame` and updates the DOM based on the global state.  This is the simplest example with an event queue.\r\n\r\n## diagrams-minimal\r\nUses [diagrams-ghcjs](https://github.com/ghcjs/diagrams-ghcjs) and [ghcjs-canvas](https://github.com/ghcjs/ghcjs-canvas) to render to a Canvas element.  Also uses [ghcjs-jquery](https://github.com/ghcjs/ghcjs-jquery)to setup the initial DOM.  There's probably a better way without jquery, however.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}